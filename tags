!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Bind	src/engine/shader.cpp	/^void	Shader::Bind()$/;"	f	class:Shader
Bind	src/engine/texture.cpp	/^void Texture::Bind(unsigned int unit)$/;"	f	class:Texture
CAMERA_HPP_	include/engine/camera.hpp	2;"	d
CC	Makefile	/^CC=			gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS= $(HEAD) -W -Wall -Wextra$/;"	m
CHUNK_HPP_	include/engine/chunk.hpp	2;"	d
COMMON_STRUCTS_H_	include/common_structs.hpp	2;"	d
CXX	Makefile	/^CXX=			clang$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS= $(HEAD) -W -Wall -Wextra$/;"	m
CalcNormals	src/engine/mesh.cpp	/^void IndexedModel::CalcNormals()$/;"	f	class:IndexedModel
Camera	include/engine/camera.hpp	/^  Camera(const vec3& pos, float fov, float aspect, float zNear, float zFar)$/;"	f	class:Camera
Camera	include/engine/camera.hpp	/^class Camera$/;"	c
CheckPos	src/engine/player.cpp	/^bool	CheckPos(vec3 pos, Map *map)$/;"	f
CheckShaderError	src/engine/shader.cpp	/^static		void CheckShaderError(GLuint shader, GLuint flag, bool isProgram, const std::string& errorMessage)$/;"	f	file:
Chunk	include/engine/chunk.hpp	/^class Chunk$/;"	c
Chunk	src/engine/chunk.cpp	/^Chunk::Chunk()$/;"	f	class:Chunk
Chunk	src/engine/chunk.cpp	/^Chunk::Chunk(const std::string &path, int chunk)$/;"	f	class:Chunk
Clear	src/engine/display.cpp	/^void	Display::Clear(float r, float g, float b, float a)$/;"	f	class:Display
ClearChunk	src/engine/cload_chunk.c	/^void	ClearChunk(char *blocks, int height)$/;"	f
CreateShader	src/engine/shader.cpp	/^static GLuint CreateShader(const std::string& text, GLenum shaderType)$/;"	f	file:
DEBUG	Makefile	/^DEBUG=			yes$/;"	m
DISPLAY_HPP_	include/engine/display.hpp	2;"	d
Display	include/engine/display.hpp	/^class Display$/;"	c
Display	src/engine/display.cpp	/^Display::Display(int width, int height, const std::string& title)$/;"	f	class:Display
Draw	src/engine/chunk.cpp	/^void Chunk::Draw()$/;"	f	class:Chunk
Draw	src/engine/map.cpp	/^void Map::Draw()$/;"	f	class:Map
Draw	src/engine/mesh.cpp	/^void Mesh::Draw()$/;"	f	class:Mesh
Draw	src/engine/player.cpp	/^void	Player::Draw()$/;"	f	class:Player
ENGINE	Makefile	/^ENGINE=			$(addprefix $(ENGINE_PREFIX),$(ENGINE_FILES))$/;"	m
ENGINE_C	Makefile	/^ENGINE_C=		$(addprefix $(ENGINE_PREFIX),$(ENGINE_C_FILES))$/;"	m
ENGINE_C_FILES	Makefile	/^ENGINE_C_FILES=		cload_chunk.c$/;"	m
ENGINE_FILES	Makefile	/^ENGINE_FILES=		chunk.cpp			\\$/;"	m
ENGINE_PREFIX	Makefile	/^ENGINE_PREFIX=		src\/engine\/$/;"	m
FALL_SPEED	include/engine/misc.hpp	12;"	d
Fall	src/engine/player.cpp	/^void Player::Fall(float time)$/;"	f	class:Player
FillCPlayer	src/engine/player.cpp	/^void	Player::FillCPlayer(t_player *p, vec3 dir)$/;"	f	class:Player
GAME	Makefile	/^GAME=			$(addprefix $(GAME_PREFIX),$(GAME_FILES))$/;"	m
GAME_FILES	Makefile	/^GAME_FILES=		main.cpp			\\$/;"	m
GAME_H_	include/game.hpp	2;"	d
GAME_PREFIX	Makefile	/^GAME_PREFIX=		src\/game\/$/;"	m
GRAPHICS_H_	include/graphics.hpp	2;"	d
GetBlock	src/engine/chunk.cpp	/^unsigned char Chunk::GetBlock(int x, int y, int z)$/;"	f	class:Chunk
GetBlock	src/engine/map.cpp	/^unsigned char	Map::GetBlock(vec3 pos)$/;"	f	class:Map
GetCollisionMove	src/engine/player.cpp	/^vec3 Player::GetCollisionMove(vec3 pos, vec3 move)$/;"	f	class:Player
GetFor	include/engine/camera.hpp	/^  vec3 &GetFor() {return m_forward;}$/;"	f	class:Camera
GetFullColor	src/engine/chunk.cpp	/^static unsigned int GetFullColor(unsigned char color)$/;"	f	file:
GetId	include/engine/player.hpp	/^  int	GetId() {return m_id;};$/;"	f	class:Player
GetModel	include/engine/transform.hpp	/^  inline glm::mat4 GetModel() const$/;"	f	class:Transform
GetNormal	include/engine/mesh.hpp	/^  inline vec3* GetNormal() {return &m_normal;}$/;"	f	class:Vertex
GetPos	include/engine/camera.hpp	/^  vec3 &GetPos() {return m_position;}$/;"	f	class:Camera
GetPos	include/engine/mesh.hpp	/^  inline vec3* GetPos() {return &m_pos;}$/;"	f	class:Vertex
GetPos	include/engine/player.hpp	/^  vec3 &GetPos() {return m_pos;};$/;"	f	class:Player
GetPos	include/engine/transform.hpp	/^  inline glm::vec3& GetPos() {return m_pos;}$/;"	f	class:Transform
GetRot	include/engine/camera.hpp	/^  vec2 &GetRot() {return m_rotation;}$/;"	f	class:Camera
GetRot	include/engine/player.hpp	/^  vec2 &GetRot() {return m_rot;};$/;"	f	class:Player
GetRot	include/engine/transform.hpp	/^  inline glm::vec3& GetRot() {return m_rot;}$/;"	f	class:Transform
GetScale	include/engine/transform.hpp	/^  inline glm::vec3& GetScale() {return m_scale;}$/;"	f	class:Transform
GetTexCoord	include/engine/mesh.hpp	/^  inline vec2* GetTexCoord() {return &m_texCoord;}$/;"	f	class:Vertex
GetTexture	include/engine/texture.hpp	/^  GLuint	GetTexture() {return m_texture;}$/;"	f	class:Texture
GetViewProjection	include/engine/camera.hpp	/^  inline mat4 GetViewProjection() const$/;"	f	class:Camera
GetWin	include/engine/display.hpp	/^  SDL_Window	*GetWin(){return m_window;};$/;"	f	class:Display
HEAD	Makefile	/^HEAD=			-Iinclude$/;"	m
INDEX_VB	include/engine/mesh.hpp	/^  INDEX_VB,$/;"	e	enum:Mesh::__anon2
IndexedModel	include/engine/mesh.hpp	/^class IndexedModel$/;"	c
InitMesh	src/engine/mesh.cpp	/^void Mesh::InitMesh(const IndexedModel& model)$/;"	f	class:Mesh
IsClosed	src/engine/display.cpp	/^bool	Display::IsClosed()$/;"	f	class:Display
IsColinear	src/engine/player.cpp	/^static bool IsColinear(vec3 u, vec3 v)$/;"	f	file:
IsLoaded	include/engine/chunk.hpp	/^  bool IsLoaded() {return m_isLoaded;}$/;"	f	class:Chunk
IsLoaded	src/engine/map.cpp	/^bool	Map::IsLoaded(ivec3 pos)$/;"	f	class:Map
IsTemp	include/engine/mesh.hpp	/^  bool IsTemp() {return m_temp;}$/;"	f	class:Mesh
JUMP_SPEED	include/engine/misc.hpp	13;"	d
Jump	src/engine/player.cpp	/^void Player::Jump()$/;"	f	class:Player
LIB	Makefile	/^LIB=			-lstdc++			\\$/;"	m
LoadChunk	src/engine/cload_chunk.c	/^char	*LoadChunk(char *dir, int chunk, int *height, int *pos)$/;"	f
LoadShader	src/engine/load_shader.cpp	/^int LoadShader(const char *fileName, char **src, int *len)$/;"	f
LoadShader	src/engine/shader.cpp	/^static std::string LoadShader(const std::string& fileName)$/;"	f	file:
MAP_HPP_	include/engine/map.hpp	2;"	d
MAX_PSEUDO	include/game.hpp	9;"	d
MENU_H_	include/Menu.h	2;"	d
MESH_HPP_	include/engine/mesh.hpp	2;"	d
MISC_HPP_	include/engine/misc.hpp	2;"	d
Map	include/engine/map.hpp	/^class Map$/;"	c
Map	src/engine/map.cpp	/^Map::Map()$/;"	f	class:Map
Map	src/engine/map.cpp	/^Map::Map(const std::string &dir)$/;"	f	class:Map
Menu	include/Menu.h	/^class Menu$/;"	c
Menu	src/game/menus/Menu.cpp	/^Menu::Menu(SDL_Surface *screen, std::vector<menuItem> *items) {$/;"	f	class:Menu
Mesh	include/engine/mesh.hpp	/^class Mesh$/;"	c
Mesh	src/engine/mesh.cpp	/^Mesh::Mesh()$/;"	f	class:Mesh
Mesh	src/engine/mesh.cpp	/^Mesh::Mesh(Vertex* vertices, unsigned int nbVertices, unsigned int *indices, unsigned int nbIndices, bool temp)$/;"	f	class:Mesh
Move	src/engine/player.cpp	/^void Player::Move(vec2 dir)$/;"	f	class:Player
NAME	Makefile	/^NAME=			coldcube$/;"	m
NAMESERV	Makefile	/^NAMESERV=		server_game$/;"	m
NB_BUFFERS	include/engine/mesh.hpp	/^  NB_BUFFERS$/;"	e	enum:Mesh::__anon2
NB_SHADERS	include/engine/shader.hpp	8;"	d
NB_UNIFORMS	include/engine/shader.hpp	/^  NB_UNIFORMS$/;"	e	enum:Shader::__anon1
NORMAL_VB	include/engine/mesh.hpp	/^  NORMAL_VB,$/;"	e	enum:Mesh::__anon2
OBJ	Makefile	/^OBJ=			$(GAME:.cpp=.o)$/;"	m
OBJSERV	Makefile	/^OBJSERV=		$(SERVER:.c=.o)$/;"	m
OFFSET	include/engine/misc.hpp	11;"	d
PLAYER_HEIGHT	include/game.hpp	8;"	d
PLAYER_HPP_	include/engine/player.hpp	2;"	d
PLAYER_SIZE	include/game.hpp	7;"	d
POSITION_VB	include/engine/mesh.hpp	/^  POSITION_VB,$/;"	e	enum:Mesh::__anon2
Player	include/engine/player.hpp	/^class Player$/;"	c
Player	src/engine/player.cpp	/^Player::Player()$/;"	f	class:Player
Player	src/engine/player.cpp	/^Player::Player(vec3 pos, float rot, Map *map, int id)$/;"	f	class:Player
Point	include/Menu.h	/^}		Point;$/;"	t	typeref:struct:s_Point
PutCube	src/engine/chunk.cpp	/^void Chunk::PutCube(unsigned char cube, ivec3 pos)$/;"	f	class:Chunk
PutCube	src/engine/map.cpp	/^void Map::PutCube(unsigned char cube, ivec3 pos)$/;"	f	class:Map
RM	Makefile	/^RM=			rm -f$/;"	m
RoundPos	src/engine/player.cpp	/^double	RoundPos(double pos, double dir, double size)$/;"	f
SERVER	Makefile	/^SERVER=			$(addprefix $(SERV_PREFIX),$(SERV_FILES))$/;"	m
SERVER_H_	include/server.hpp	2;"	d
SERV_FILES	Makefile	/^SERV_FILES=		main.c				\\$/;"	m
SERV_PREFIX	Makefile	/^SERV_PREFIX=		src\/server\/$/;"	m
SHADER_H	include/engine/shader.hpp	2;"	d
Save	src/engine/chunk.cpp	/^void	Chunk::Save(char *file)$/;"	f	class:Chunk
Save	src/engine/map.cpp	/^void Map::Save()$/;"	f	class:Map
SetCam	src/engine/player.cpp	/^void	Player::SetCam(Camera &cam)$/;"	f	class:Player
SetPlanes	src/engine/chunk.cpp	/^ Mesh SetPlanes(int height, vec3 pos)$/;"	f
SetPos	include/engine/transform.hpp	/^  inline void SetPos(const glm::vec3& pos) {m_pos = pos;}$/;"	f	class:Transform
SetRot	include/engine/transform.hpp	/^  inline void SetRot(const glm::vec3& rot) {m_rot = rot;}$/;"	f	class:Transform
SetScale	include/engine/transform.hpp	/^  inline void SetScale(const glm::vec3& scale) {m_scale = scale;}$/;"	f	class:Transform
SetTex	src/engine/chunk.cpp	/^static Texture SetTex(char *chunk, int height)$/;"	f	file:
Shader	include/engine/shader.hpp	/^class	Shader$/;"	c
Shader	src/engine/shader.cpp	/^Shader::Shader(const std::string& fileName)$/;"	f	class:Shader
TCP_READ	include/server.hpp	4;"	d
TEXCOORD_VB	include/engine/mesh.hpp	/^  TEXCOORD_VB,$/;"	e	enum:Mesh::__anon2
TEXTURE_HPP_	include/engine/texture.hpp	2;"	d
TEXT_H_	include/class/text.hpp	2;"	d
TOOLS	Makefile	/^TOOLS=			$(addprefix $(TOOLS_PREFIX),$(TOOLS_FILES))$/;"	m
TOOLS_C	Makefile	/^TOOLS_C=		$(addprefix $(TOOLS_PREFIX),$(TOOLS_C_FILES))$/;"	m
TOOLS_FILES	Makefile	/^TOOLS_FILES=		text.cpp			\\$/;"	m
TOOLS_H_	include/tools.hpp	2;"	d
TOOLS_PREFIX	Makefile	/^TOOLS_PREFIX=		src\/tools\/$/;"	m
TRANSFORM_HPP_	include/engine/transform.hpp	2;"	d
TRANSFORM_U	include/engine/shader.hpp	/^  TRANSFORM_U,$/;"	e	enum:Shader::__anon1
Temp	include/engine/chunk.hpp	/^  void	Temp(bool t) {$/;"	f	class:Chunk
Temp	include/engine/mesh.hpp	/^  void Temp(bool t) {m_temp = t;}$/;"	f	class:Mesh
Temp	include/engine/texture.hpp	/^  void		Temp(bool t) {m_temp = t;}$/;"	f	class:Texture
Texture	include/engine/texture.hpp	/^class	Texture$/;"	c
Texture	src/engine/texture.cpp	/^Texture::Texture()$/;"	f	class:Texture
Texture	src/engine/texture.cpp	/^Texture::Texture(const unsigned char *imgData, int width, int height, bool temp)$/;"	f	class:Texture
Transform	include/engine/transform.hpp	/^  Transform(const glm::vec3& pos = glm::vec3(),$/;"	f	class:Transform
Transform	include/engine/transform.hpp	/^class Transform$/;"	c
UDP_READ	include/server.hpp	7;"	d
UnloadShader	src/engine/load_shader.cpp	/^void UnloadShader(GLchar** ShaderSource)$/;"	f
Update	src/engine/display.cpp	/^void	Display::Update(Camera &cam, Map &map, Player &player,$/;"	f	class:Display
Update	src/engine/player.cpp	/^void Player::Update(float time)$/;"	f	class:Player
Update	src/engine/shader.cpp	/^void	Shader::Update(const Transform& transform, Camera& camera)$/;"	f	class:Shader
UpdateFor	include/engine/camera.hpp	/^  void UpdateFor()$/;"	f	class:Camera
UpdateMenu	src/engine/display.cpp	/^void	Display::UpdateMenu(Menu *menu, std::vector<menuItem> &items,$/;"	f	class:Display
Vertex	include/engine/mesh.hpp	/^  Vertex()$/;"	f	class:Vertex
Vertex	include/engine/mesh.hpp	/^  Vertex(const vec3& pos, const vec2& texCoord, const vec3 normal = vec3(0, 0, 0))$/;"	f	class:Vertex
Vertex	include/engine/mesh.hpp	/^class Vertex$/;"	c
WIN_TITLE	include/game.hpp	6;"	d
WIN_X	include/game.hpp	4;"	d
WIN_Y	include/game.hpp	5;"	d
a	include/common_structs.hpp	/^  unsigned int		a : 2;$/;"	m	struct:s_cube
action	include/server.hpp	/^  int			action;$/;"	m	struct:s_tcps
action	include/server.hpp	/^  int			action;$/;"	m	struct:s_udps
addIndex	include/server.hpp	/^  int			addIndex;$/;"	m	struct:s_tcps
ammo	include/common_structs.hpp	/^  int			ammo; \/* Total de munitions *\/$/;"	m	struct:s_weapon
b	include/common_structs.hpp	/^  unsigned int		b : 2;$/;"	m	struct:s_cube
block	include/common_structs.hpp	/^  t_block		block[16 * 16 * 16];$/;"	m	struct:s_chunk
box	include/Menu.h	/^  Point box[4];$/;"	m	struct:menuItem
buff	include/common_structs.hpp	/^  char			buff[140];$/;"	m	struct:s_tcpc
buff	include/common_structs.hpp	/^  char			buff[70];$/;"	m	struct:s_udpc
buff	include/server.hpp	/^  char			buff[TCP_READ + 1];$/;"	m	struct:s_tcps
buff	include/server.hpp	/^  char			buff[UDP_READ + 1];$/;"	m	struct:s_udps
byte	include/common_structs.hpp	/^  unsigned char		byte;$/;"	m	struct:s_block
byte_size	include/graphics.hpp	/^  __attribute__((packed)) unsigned int		byte_size;$/;"	m	struct:s_bmp
chat_toggle	include/common_structs.hpp	/^  bool			chat_toggle;$/;"	m	struct:s_interface
checkPacket	src/tools/check_package.cpp	/^bool	checkPacket(char *str)$/;"	f
chunks	include/common_structs.hpp	/^  t_chunk		chunks[256];$/;"	m	struct:s_map
cli_addrl	include/server.hpp	/^  int			cli_addrl;$/;"	m	struct:s_tcps
cli_addrl	include/server.hpp	/^  int			cli_addrl;$/;"	m	struct:s_udps
cli_buff	include/server.hpp	/^  char			cli_buff[8][200];$/;"	m	struct:s_udps
cli_sock	include/server.hpp	/^  int			cli_sock[10];$/;"	m	struct:s_tcps
cli_sock	include/server.hpp	/^  struct sockaddr_in	cli_sock[10];$/;"	m	struct:s_udps	typeref:struct:s_udps::sockaddr_in
clientLaunchTcpc	src/tools/tcp_client.cpp	/^int		clientLaunchTcpc(t_data *data)$/;"	f
clientLaunchUdpc	src/tools/udp_client.cpp	/^int		clientLaunchUdpc(t_data *data)$/;"	f
color_resolution	include/graphics.hpp	/^  __attribute__((packed)) unsigned short	color_resolution;$/;"	m	struct:s_bmp
compression	include/graphics.hpp	/^  __attribute__((packed)) unsigned int		compression;$/;"	m	struct:s_bmp
createUdpPacket	src/tools/udpPacket.cpp	/^int		createUdpPacket(t_data *data, t_player *player)$/;"	f
cube	include/common_structs.hpp	/^  t_cube		cube;$/;"	m	struct:s_block
currentItem	include/Menu.h	/^  int currentItem;$/;"	m	class:Menu
cursor	include/Menu.h	/^  SDL_Rect cursor;$/;"	m	class:Menu
direction	include/common_structs.hpp	/^  vector3		direction;$/;"	m	struct:s_player
draw	src/game/menus/Menu.cpp	/^void Menu::draw() {$/;"	f	class:Menu
drawText	src/tools/text.cpp	/^void	drawText(char *str, int posx, int posy,$/;"	f
engineMain	src/engine/engine.cpp	/^int	engineMain(Display &display, t_data *data)$/;"	f
events	include/common_structs.hpp	/^  uint32_t		events;$/;"	m	struct:s_player
font	include/Menu.h	/^  TTF_Font *font;$/;"	m	class:Menu
free_game	src/game/free.cpp	/^void	free_game(t_data *data)$/;"	f
g	include/common_structs.hpp	/^  unsigned int		g : 2;$/;"	m	struct:s_cube
game	include/common_structs.hpp	/^  t_game		game;$/;"	m	struct:s_data
game	src/game/main.cpp	/^int	game()$/;"	f
height	include/graphics.hpp	/^  __attribute__((packed)) int			height;$/;"	m	struct:s_bmp
height	include/graphics.hpp	/^  int			height;$/;"	m	struct:s_texture
hover	src/game/menus/Menu.cpp	/^void Menu::hover(int x, int y) {$/;"	f	class:Menu
id	include/common_structs.hpp	/^  int			id; \/* Id de l'arme *\/$/;"	m	struct:s_weapon
id	include/common_structs.hpp	/^  int			id; \/* Le serveur defini l'id du joueur*\/$/;"	m	struct:s_player
indices	include/engine/mesh.hpp	/^  std::vector<unsigned int> indices;$/;"	m	class:IndexedModel
initData	src/game/main.cpp	/^void	initData(t_data *data)$/;"	f
init_tcps_cli	src/server/tcp/server_tcp_functions.c	/^void		init_tcps_cli(t_tcps *tcp)$/;"	f
interface	include/common_structs.hpp	/^  t_interface		interface;$/;"	m	struct:s_data
ip	include/common_structs.hpp	/^  char			*ip;$/;"	m	struct:s_network
items	include/Menu.h	/^  std::vector<menuItem> *items;$/;"	m	class:Menu
life	include/common_structs.hpp	/^  char			life;$/;"	m	struct:s_player
loaded	include/common_structs.hpp	/^  int			loaded;$/;"	m	struct:s_weapon
local	include/common_structs.hpp	/^  t_player_local	local;$/;"	m	struct:s_player
loginMenu	src/game/menus/main_menu.cpp	/^void	loginMenu(std::vector<menuItem> &items)$/;"	f
m_chunk	include/engine/chunk.hpp	/^  char		*m_chunk;$/;"	m	class:Chunk
m_chunks	include/engine/map.hpp	/^  Chunk	m_chunks[256];$/;"	m	class:Map
m_drawCount	include/engine/mesh.hpp	/^  unsigned int m_drawCount;$/;"	m	class:Mesh
m_fall	include/engine/player.hpp	/^  float		m_fall;$/;"	m	class:Player
m_forward	include/engine/camera.hpp	/^  vec3 m_forward;$/;"	m	class:Camera
m_glContext	include/engine/display.hpp	/^  SDL_GLContext	m_glContext;$/;"	m	class:Display
m_height	include/engine/chunk.hpp	/^  int		m_height;$/;"	m	class:Chunk
m_id	include/engine/player.hpp	/^  int		m_id;$/;"	m	class:Player
m_isClosed	include/engine/display.hpp	/^  bool		m_isClosed;$/;"	m	class:Display
m_isLoaded	include/engine/chunk.hpp	/^  bool		m_isLoaded;$/;"	m	class:Chunk
m_map	include/engine/player.hpp	/^  Map		*m_map;$/;"	m	class:Player
m_model	include/engine/player.hpp	/^  Mesh		m_model;$/;"	m	class:Player
m_move	include/engine/player.hpp	/^  vec2		m_move;$/;"	m	class:Player
m_nbChunk	include/engine/map.hpp	/^  int	m_nbChunk;$/;"	m	class:Map
m_normal	include/engine/mesh.hpp	/^  vec3 m_normal;$/;"	m	class:Vertex
m_perspective	include/engine/camera.hpp	/^  mat4 m_perspective;$/;"	m	class:Camera
m_planes	include/engine/chunk.hpp	/^  Mesh		m_planes;$/;"	m	class:Chunk
m_pos	include/engine/chunk.hpp	/^  ivec3		m_pos;$/;"	m	class:Chunk
m_pos	include/engine/mesh.hpp	/^  vec3 m_pos;$/;"	m	class:Vertex
m_pos	include/engine/player.hpp	/^  vec3		m_pos;$/;"	m	class:Player
m_pos	include/engine/transform.hpp	/^  glm::vec3 m_pos;$/;"	m	class:Transform
m_position	include/engine/camera.hpp	/^  vec3 m_position;$/;"	m	class:Camera
m_program	include/engine/shader.hpp	/^  GLuint	m_program;$/;"	m	class:Shader
m_rot	include/engine/player.hpp	/^  vec2		m_rot;$/;"	m	class:Player
m_rot	include/engine/transform.hpp	/^  glm::vec3 m_rot;$/;"	m	class:Transform
m_rotation	include/engine/camera.hpp	/^  vec2 m_rotation;$/;"	m	class:Camera
m_scale	include/engine/transform.hpp	/^  glm::vec3 m_scale;$/;"	m	class:Transform
m_shaders	include/engine/shader.hpp	/^  GLuint	m_shaders[NB_SHADERS];$/;"	m	class:Shader
m_speed	include/engine/player.hpp	/^  float		m_speed;$/;"	m	class:Player
m_temp	include/engine/mesh.hpp	/^  bool	m_temp;$/;"	m	class:Mesh
m_temp	include/engine/texture.hpp	/^  bool		m_temp;$/;"	m	class:Texture
m_texCoord	include/engine/mesh.hpp	/^  vec2 m_texCoord;$/;"	m	class:Vertex
m_texture	include/engine/chunk.hpp	/^  Texture	m_texture;$/;"	m	class:Chunk
m_texture	include/engine/texture.hpp	/^  GLuint	m_texture;$/;"	m	class:Texture
m_uniforms	include/engine/shader.hpp	/^  GLuint	m_uniforms[NB_UNIFORMS];$/;"	m	class:Shader
m_up	include/engine/camera.hpp	/^  vec3 m_up;$/;"	m	class:Camera
m_vertexArrayBuffers	include/engine/mesh.hpp	/^  GLuint m_vertexArrayBuffers[NB_BUFFERS];$/;"	m	class:Mesh
m_vertexArrayObject	include/engine/mesh.hpp	/^  GLuint m_vertexArrayObject;$/;"	m	class:Mesh
m_window	include/engine/display.hpp	/^  SDL_Window*	m_window;$/;"	m	class:Display
main	generate_map.c	/^int	main(int ac, char **av)$/;"	f
main	menu/main.cpp	/^int main(int argc, char *argv[])$/;"	f
main	src/game/main.cpp	/^int	main(int ac, char **av, char **env)$/;"	f
main	src/server/main.c	/^int		main(int argc, char **argv)$/;"	f
mainMenu	src/game/menus/main_menu.cpp	/^void	mainMenu(std::vector<menuItem> &items)$/;"	f
main_sock	include/server.hpp	/^  int			main_sock;$/;"	m	struct:s_tcps
main_sock	include/server.hpp	/^  int			main_sock;$/;"	m	struct:s_udps
main_tcp_thread	src/server/tcp/main_tcp_thread.c	/^void		*main_tcp_thread(void *data)$/;"	f
main_udp_thread	src/server/udp/main_udp_thread.c	/^void		*main_udp_thread(void *data)$/;"	f
map	include/common_structs.hpp	/^  t_map			map;$/;"	m	struct:s_data
max_fd	include/server.hpp	/^  int			max_fd;$/;"	m	struct:s_tcps
menuItem	include/Menu.h	/^struct menuItem$/;"	s
menuLocation	include/Menu.h	/^  Point menuLocation;$/;"	m	class:Menu
move	include/common_structs.hpp	/^  vector3      		move;$/;"	m	struct:s_player_local
moveDown	src/game/menus/Menu.cpp	/^void Menu::moveDown() {$/;"	f	class:Menu
moveUp	src/game/menus/Menu.cpp	/^void Menu::moveUp() {$/;"	f	class:Menu
ms	include/server.hpp	/^  struct timeval	ms;$/;"	m	struct:s_udps	typeref:struct:s_udps::timeval
my_addr	include/server.hpp	/^  struct sockaddr_in	my_addr;$/;"	m	struct:s_tcps	typeref:struct:s_tcps::sockaddr_in
my_addr	include/server.hpp	/^  struct sockaddr_in	my_addr;$/;"	m	struct:s_udps	typeref:struct:s_udps::sockaddr_in
my_addrl	include/server.hpp	/^  int			my_addrl;$/;"	m	struct:s_tcps
my_addrl	include/server.hpp	/^  int			my_addrl;$/;"	m	struct:s_udps
nb_actual	include/server.hpp	/^  int			nb_actual;$/;"	m	struct:s_tcps
nb_actual	include/server.hpp	/^  int			nb_actual;$/;"	m	struct:s_udps
nb_colors	include/graphics.hpp	/^  __attribute__((packed)) unsigned int		nb_colors;$/;"	m	struct:s_bmp
nb_imp_colors	include/graphics.hpp	/^  __attribute__((packed)) unsigned int		nb_imp_colors;$/;"	m	struct:s_bmp
net	include/common_structs.hpp	/^  t_network		net;$/;"	m	struct:s_data
next	include/common_structs.hpp	/^  struct s_objects	*next;$/;"	m	struct:s_objects	typeref:struct:s_objects::s_objects
normals	include/engine/mesh.hpp	/^  std::vector<vec3> normals;$/;"	m	class:IndexedModel
obj	include/common_structs.hpp	/^  t_objects		*obj;$/;"	m	struct:s_data
offset	include/graphics.hpp	/^  __attribute__((packed)) unsigned int		offset;$/;"	m	struct:s_bmp
one	include/graphics.hpp	/^  __attribute__((packed)) unsigned short	one;$/;"	m	struct:s_bmp
optionMenu	src/game/menus/main_menu.cpp	/^void	optionMenu(std::vector<menuItem> &items)$/;"	f
pauseMenu	src/game/menus/main_menu.cpp	/^void	pauseMenu(std::vector<menuItem> &items)$/;"	f
pixels	include/graphics.hpp	/^  t_color		*pixels;$/;"	m	struct:s_texture
playerIndexTcp	include/common_structs.hpp	/^  int			playerIndexTcp;$/;"	m	struct:s_network
playerIndexUdp	include/common_structs.hpp	/^  int			playerIndexUdp;$/;"	m	struct:s_network
players	include/common_structs.hpp	/^  t_player		players[10];$/;"	m	struct:s_data
port	include/common_structs.hpp	/^  int			port;$/;"	m	struct:s_network
port	include/server.hpp	/^  int			port;$/;"	m	struct:s_tcps
position	include/common_structs.hpp	/^  vector3		position;$/;"	m	struct:s_player
positions	include/engine/mesh.hpp	/^  std::vector<vec3> positions;$/;"	m	class:IndexedModel
power	include/common_structs.hpp	/^  int			power;$/;"	m	struct:s_weapon
prev	include/common_structs.hpp	/^  struct s_objects	*prev;$/;"	m	struct:s_objects	typeref:struct:s_objects::s_objects
pseudo	include/common_structs.hpp	/^  char			*pseudo;$/;"	m	struct:s_network
pseudo	include/common_structs.hpp	/^  char			*pseudo;$/;"	m	struct:s_player
pseudo	include/server.hpp	/^  char			pseudo[10][21];$/;"	m	struct:s_tcps
pseudo	include/server.hpp	/^  char			pseudo[10][21];$/;"	m	struct:s_udps
ptToFunc	include/Menu.h	/^  void (*ptToFunc)();$/;"	m	struct:menuItem
r	include/common_structs.hpp	/^  unsigned int		r : 2;$/;"	m	struct:s_cube
readUdpPacket	src/tools/udpPacket.cpp	/^int		readUdpPacket(t_data *data)$/;"	f
readfds	include/server.hpp	/^  fd_set		readfds;$/;"	m	struct:s_tcps
readfds	include/server.hpp	/^  fd_set		readfds;$/;"	m	struct:s_udps
reserved	include/graphics.hpp	/^  __attribute__((packed)) unsigned int		reserved;$/;"	m	struct:s_bmp
resolution_hor	include/graphics.hpp	/^  __attribute__((packed)) int			resolution_hor;$/;"	m	struct:s_bmp
resolution_ver	include/graphics.hpp	/^  __attribute__((packed)) int			resolution_ver;$/;"	m	struct:s_bmp
run	include/common_structs.hpp	/^  int			run;$/;"	m	struct:s_tcpc
run	include/common_structs.hpp	/^  int			run;$/;"	m	struct:s_udpc
run	include/server.hpp	/^  int			run;$/;"	m	struct:s_tcps
run	include/server.hpp	/^  int			run;$/;"	m	struct:s_udps
running	include/common_structs.hpp	/^  bool			running;$/;"	m	struct:s_game
s_Point	include/Menu.h	/^typedef struct	s_Point$/;"	s
s_block	include/common_structs.hpp	/^typedef struct		s_block$/;"	s
s_bmp	include/graphics.hpp	/^typedef struct					s_bmp$/;"	s
s_chunk	include/common_structs.hpp	/^typedef	struct		s_chunk$/;"	s
s_cube	include/common_structs.hpp	/^typedef	struct		s_cube$/;"	s
s_data	include/common_structs.hpp	/^typedef	struct		s_data$/;"	s
s_game	include/common_structs.hpp	/^typedef struct		s_game$/;"	s
s_interface	include/common_structs.hpp	/^typedef	struct		s_interface$/;"	s
s_map	include/common_structs.hpp	/^typedef	struct		s_map$/;"	s
s_network	include/common_structs.hpp	/^typedef	struct		s_network$/;"	s
s_objects	include/common_structs.hpp	/^typedef struct		s_objects$/;"	s
s_player	include/common_structs.hpp	/^typedef	struct		s_player$/;"	s
s_player_local	include/common_structs.hpp	/^typedef struct		s_player_local$/;"	s
s_tcpc	include/common_structs.hpp	/^typedef	struct		s_tcpc$/;"	s
s_tcps	include/server.hpp	/^typedef struct		s_tcps$/;"	s
s_texture	include/graphics.hpp	/^typedef struct		s_texture$/;"	s
s_udpc	include/common_structs.hpp	/^typedef	struct		s_udpc$/;"	s
s_udps	include/server.hpp	/^typedef struct		s_udps$/;"	s
s_weapon	include/common_structs.hpp	/^typedef struct		s_weapon$/;"	s
screen	include/Menu.h	/^  SDL_Surface *screen;$/;"	m	class:Menu
screen	include/common_structs.hpp	/^  SDL_Surface		*screen;$/;"	m	struct:s_game
selectCurrentItem	src/game/menus/Menu.cpp	/^void Menu::selectCurrentItem() {$/;"	f	class:Menu
selected_weapon	include/common_structs.hpp	/^  uint32_t     		selected_weapon; \/* Index du t_weapon *\/$/;"	m	struct:s_player
sendUdpPacket	src/tools/sendUdpPacket.cpp	/^int		sendUdpPacket(t_data *data, char packet[42])$/;"	f
server_check_msg_tcp	src/server/tcp/main_tcp_thread.c	/^void		server_check_msg_tcp(t_tcps *tcp)$/;"	f
server_check_msg_udp	src/server/udp/main_udp_thread.c	/^void		server_check_msg_udp(t_udps *udp)$/;"	f
setClosed	include/engine/display.hpp	/^  void	setClosed(bool state){m_isClosed = state;};$/;"	f	class:Display
set_cli_buff	src/server/udp/server_udp_msg.c	/^void		set_cli_buff(t_udps *udp, int index)$/;"	f
set_max_fd	src/server/tcp/server_tcp_functions.c	/^void		set_max_fd(t_tcps *tcp)$/;"	f
size	include/graphics.hpp	/^  __attribute__((packed)) unsigned int		size;$/;"	m	struct:s_bmp
size_struct	include/graphics.hpp	/^  __attribute__((packed)) unsigned int		size_struct;$/;"	m	struct:s_bmp
sock	include/common_structs.hpp	/^  int			sock;$/;"	m	struct:s_tcpc
sock	include/common_structs.hpp	/^  int			sock;$/;"	m	struct:s_udpc
sound_empty	include/common_structs.hpp	/^  int			sound_empty;$/;"	m	struct:s_weapon
sound_fire	include/common_structs.hpp	/^  int			sound_fire;$/;"	m	struct:s_weapon
sound_reload	include/common_structs.hpp	/^  int			sound_reload;$/;"	m	struct:s_weapon
sounds	include/common_structs.hpp	/^  char			sounds[];$/;"	m	struct:s_data
spawn	include/common_structs.hpp	/^  vector3		spawn[16];$/;"	m	struct:s_map
t_block	include/common_structs.hpp	/^}			t_block;$/;"	t	typeref:struct:s_block
t_bmp	include/graphics.hpp	/^}						t_bmp;$/;"	t	typeref:struct:s_bmp
t_chunk	include/common_structs.hpp	/^}			t_chunk;$/;"	t	typeref:struct:s_chunk
t_cube	include/common_structs.hpp	/^}			t_cube ;$/;"	t	typeref:struct:s_cube
t_data	include/common_structs.hpp	/^}			t_data;$/;"	t	typeref:struct:s_data
t_game	include/common_structs.hpp	/^}			t_game;$/;"	t	typeref:struct:s_game
t_interface	include/common_structs.hpp	/^}			t_interface;$/;"	t	typeref:struct:s_interface
t_map	include/common_structs.hpp	/^}			t_map;$/;"	t	typeref:struct:s_map
t_network	include/common_structs.hpp	/^}			t_network;$/;"	t	typeref:struct:s_network
t_objects	include/common_structs.hpp	/^}			t_objects;$/;"	t	typeref:struct:s_objects
t_player	include/common_structs.hpp	/^}			t_player;$/;"	t	typeref:struct:s_player
t_player_local	include/common_structs.hpp	/^}			t_player_local;$/;"	t	typeref:struct:s_player_local
t_tcpc	include/common_structs.hpp	/^}			t_tcpc;$/;"	t	typeref:struct:s_tcpc
t_tcps	include/server.hpp	/^}			t_tcps;$/;"	t	typeref:struct:s_tcps
t_texture	include/graphics.hpp	/^}			t_texture;$/;"	t	typeref:struct:s_texture
t_udpc	include/common_structs.hpp	/^}			t_udpc;$/;"	t	typeref:struct:s_udpc
t_udps	include/server.hpp	/^}			t_udps;$/;"	t	typeref:struct:s_udps
t_weapon	include/common_structs.hpp	/^}			t_weapon;$/;"	t	typeref:struct:s_weapon
tcp	include/common_structs.hpp	/^  t_tcpc		tcp;$/;"	m	struct:s_network
tcp_get_pseudo_index	src/server/tcp/tcp_server_pseudo.c	/^int		tcp_get_pseudo_index(t_tcps *tcp, char *str)$/;"	f
tcp_init_zero_pseudo	src/server/tcp/tcp_server_pseudo.c	/^void		tcp_init_zero_pseudo(t_tcps *tcp)$/;"	f
tcp_server_add_pseudo	src/server/tcp/tcp_server_pseudo.c	/^int		tcp_server_add_pseudo(t_tcps *tcp, char *str)$/;"	f
tcp_server_check_pseudo	src/server/tcp/tcp_server_pseudo.c	/^int		tcp_server_check_pseudo(t_tcps *tcp, char *str)$/;"	f
tcp_server_remove_pseudo_str	src/server/tcp/tcp_server_pseudo.c	/^void		tcp_server_remove_pseudo_str(t_tcps *tcp, char *str)$/;"	f
tcp_thread	src/server/tcp/main_tcp_thread.c	/^void		tcp_thread(t_tcps *tcp)$/;"	f
tcp_thread	src/tools/tcp_client.cpp	/^void		*tcp_thread(void *data)$/;"	f
tcps_check_received	src/server/tcp/server_tcp_functions.c	/^void		tcps_check_received(t_tcps *tcp, int i)$/;"	f
tcps_cli_add	src/server/tcp/server_tcp_functions.c	/^void		tcps_cli_add(t_tcps *tcp)$/;"	f
tcps_remove_sock	src/server/tcp/server_tcp_functions.c	/^void		tcps_remove_sock(t_tcps *tcp, int index)$/;"	f
tcps_send_to_all	src/server/tcp/server_tcp_msg.c	/^void		tcps_send_to_all(t_tcps *tcp)$/;"	f
tcps_sync_all	src/server/tcp/server_tcp_msg.c	/^void		tcps_sync_all(t_tcps *tcp)$/;"	f
texCoords	include/engine/mesh.hpp	/^  std::vector<vec2> texCoords;$/;"	m	class:IndexedModel
text	include/Menu.h	/^  std::string text;$/;"	m	struct:menuItem
textSurface	include/Menu.h	/^  SDL_Surface *textSurface;$/;"	m	class:Menu
thread	include/common_structs.hpp	/^  pthread_t		thread;$/;"	m	struct:s_tcpc
thread	include/common_structs.hpp	/^  pthread_t		thread;$/;"	m	struct:s_udpc
timeout	include/server.hpp	/^  int			timeout[10];$/;"	m	struct:s_udps
tmp_sock	include/server.hpp	/^  int			tmp_sock;$/;"	m	struct:s_tcps
tmp_sock	include/server.hpp	/^  struct sockaddr_in	tmp_sock;$/;"	m	struct:s_udps	typeref:struct:s_udps::sockaddr_in
to_serv	include/common_structs.hpp	/^  struct sockaddr_in	to_serv;$/;"	m	struct:s_tcpc	typeref:struct:s_tcpc::sockaddr_in
to_serv	include/common_structs.hpp	/^  struct sockaddr_in	to_serv;$/;"	m	struct:s_udpc	typeref:struct:s_udpc::sockaddr_in
type	include/graphics.hpp	/^  __attribute__((packed)) unsigned short	type;$/;"	m	struct:s_bmp
udp	include/common_structs.hpp	/^  t_udpc		udp;$/;"	m	struct:s_network
udp_get_pseudo_index	src/server/udp/udp_server_pseudo.c	/^int		udp_get_pseudo_index(t_udps *udp, char *str)$/;"	f
udp_init_zero_pseudo	src/server/udp/udp_server_pseudo.c	/^void		udp_init_zero_pseudo(t_udps *udp)$/;"	f
udp_server_add_pseudo	src/server/udp/udp_server_pseudo.c	/^int		udp_server_add_pseudo(t_udps *udp, char *str)$/;"	f
udp_server_check_pseudo	src/server/udp/udp_server_pseudo.c	/^int		udp_server_check_pseudo(t_udps *udp, char *str)$/;"	f
udp_server_remove_pseudo_str	src/server/udp/udp_server_pseudo.c	/^void		udp_server_remove_pseudo_str(t_udps *udp, char *str)$/;"	f
udp_thread	src/server/udp/main_udp_thread.c	/^void		udp_thread(t_udps *udp)$/;"	f
udp_thread	src/tools/udp_client.cpp	/^void			*udp_thread(void *data)$/;"	f
udps_check_timeout	src/server/udp/server_udp_msg.c	/^void		udps_check_timeout(t_udps *udp)$/;"	f
udps_send_to_all	src/server/udp/server_udp_msg.c	/^void		udps_send_to_all(t_udps *udp)$/;"	f
vector3	include/common_structs.hpp	/^typedef glm::vec3	vector3;$/;"	t
weapons	include/common_structs.hpp	/^  t_weapon		weapons[3];$/;"	m	struct:s_player
width	include/graphics.hpp	/^  __attribute__((packed)) int			width;$/;"	m	struct:s_bmp
width	include/graphics.hpp	/^  int			width;$/;"	m	struct:s_texture
x	include/Menu.h	/^  int	x;$/;"	m	struct:s_Point
y	include/Menu.h	/^  int	y;$/;"	m	struct:s_Point
~Chunk	src/engine/chunk.cpp	/^Chunk::~Chunk()$/;"	f	class:Chunk
~Display	src/engine/display.cpp	/^Display::~Display()$/;"	f	class:Display
~Map	src/engine/map.cpp	/^Map::~Map()$/;"	f	class:Map
~Menu	src/game/menus/Menu.cpp	/^Menu::~Menu() {$/;"	f	class:Menu
~Mesh	src/engine/mesh.cpp	/^Mesh::~Mesh()$/;"	f	class:Mesh
~Player	src/engine/player.cpp	/^Player::~Player()$/;"	f	class:Player
~Shader	src/engine/shader.cpp	/^Shader::~Shader()$/;"	f	class:Shader
~Texture	src/engine/texture.cpp	/^Texture::~Texture()$/;"	f	class:Texture
